#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nightlife-express:server');
var http = require('http');
var Stock = require('../models/stocks');
var async = require('async');
const alpha = require('alphavantage')({ key: '2LSUS7X2UPKUPU2A' });
var request = require('request');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

setInterval( function(){
  request
  .get(process.env.APP_URL+'stock/daily')
  .on('response', function(response) {


    console.log(response.statusCode) // 200
    console.log(response.headers['content-type']) // 'image/png'

    Stock.find({}).then(function(data){
      // console.log(data);
      var length = data.length
      var stockNames = []
      data.forEach(function(item){
        stockNames.push(item.symbol)
      });
      console.log(stockNames);   //[ 'TWTR', 'PTC' ]
      var interval='60min'
      var datatype='json'
      var outputsize = 'compact'

      async.map(stockNames,function(name,callback){
      var symbol = name;
      alpha.data.daily(symbol, outputsize, datatype, interval)
        .then(data => {
        var polished = alpha.util.polish(data);
        var ClosePrices = [];
        var labels = [];

        for (key in polished['data']){
          ClosePrices.push(+polished['data'][`${key}`]['close']);
          labels.push(key.slice(0,10));
        }

        var result = {"symbol":symbol,
                     "labels":labels,
                     "ClosePrices": ClosePrices };
        // console.log(result);
        callback(null,result);
      });
      },function(err,results){
        console.log(results);

        Stock.remove({}, function(err) {
           console.log('historical collection removed');
           Stock.insertMany(results);
        });
      });   // End of async
    });   // End of Stock find
  })
  // console.log('test for occurence');
}, 1000*60*60);   // Alpha API update data every 60min



var redis = require('socket.io-redis');
var io = require('socket.io')(server);
// var io_redis = io.adapter(redis({
//     host: '127.0.0.1',
//     port: 6379
// }));
var io_redis = io.adapter(redis(process.env.REDIS_URL));
// Custom namespaces
var time = io_redis
    .on('connection',(socket) => {

      socket.on('ack', function (data,cb) {
        responseData = 'Acknowledgement:' + typeof(data) + data;
       cb(responseData);
      });

      socket.on('delete', function (data,cb) {
        console.log(data);  // ok
        time.emit('getdata', data);
        responseData = 'Acknowledgement:' + typeof(data) + data;
        cb(responseData);
      });


      socket.on('addstock',function(data){
             console.log('add stock to MongoDB');
             const query = { 'symbol':data['symbol']}
             const update = {
                             $set:{'ClosePrices':data['ClosePrices'],'labels':data['labels']}
                           };
             Stock.updateOne(query,update,{upsert: true}).then(function(){   //upsert: bool - creates the object if it doesn't exist. defaults to false.

               Stock.findOne(query).then(function(stock){
                 console.log('requery on DB:');
               })
             });    // End of Stock DB
       })

    });
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
