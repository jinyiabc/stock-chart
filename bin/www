#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nightlife-express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// var pub = require('redis').createClient(process.env.REDIS_URL);
// pub.on('connect', function() {
//     console.log('connected');
// });
// pub.publish("temp-reading:living-room", "37.0");
//
// var sub = require('redis').createClient(process.env.REDIS_URL);
// sub.on("message", function(channel, message) {
//   console.log("A temperature of " + message + " was read.");
//   client.incr("temp-count");
// });
//
// sub.subscribe("temp-reading:living-room");
// var subscriber = require("redis").createClient(process.env.REDIS_URL)
//
// subscriber.on("message", function(channel, message) {
//   console.log("A price of daily stock:", message );
//   // client.incr("temp-count");
// });
//
// subscriber.subscribe("stock:daily");

var redis = require('socket.io-redis');
var io = require('socket.io')(server);
var io_redis = io.adapter(redis({
    host: '127.0.0.1',
    port: 6379
}));

// Custom namespaces
var chat = io_redis
  .of('/chat')
  .on('connection', (socket) => {

    debug('made socket connection', socket.id);
    socket.on('disconnect', function(){
      console.log('user disconnected');
    });

    // Handle chat event
    socket.on('chat', function(data,callback){
      // the client passes 'callback' as a function. When we invoke the callback on the server
      // the code on the client side will run
        responseData = 'Acknoledgement:'+ JSON.stringify(data,null,4);
        callback(responseData);
        chat.emit('chat', data);
    });
    // Handle typing event
    socket.on('typing', function(data){
        socket.broadcast.emit('typing', data);

    });
});

var time = io_redis
    .on('connection',(socket) => {

      socket.on('ack', function (data,cb) {
        responseData = 'Acknowledgement:' + typeof(data) + data;
       cb(responseData);
      });

    });
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
